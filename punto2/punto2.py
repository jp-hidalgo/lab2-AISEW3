import os
from dotenv import load_dotenv, find_dotenv
from autogen import AssistantAgent, GroupChat, UserProxyAgent, GroupChatManager
import requests

# Load environment variables
load_dotenv(find_dotenv())
gemini_api_key = os.getenv("GOOGLE_API_KEY")
news_api_key = os.getenv("NEWS_API_KEY")

# Configuration for autogen agents
llm_config = {"model": "gemini-1.5-flash-latest", "api_key": gemini_api_key, "api_type": "google"}

# Define agents
user_proxy = UserProxyAgent(
    name="User_proxy",
    system_message="A human admin.",
    code_execution_config={
        "last_n_messages": 2,
        "work_dir": "groupchat",
        "use_docker": False,
    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.
    human_input_mode="TERMINATE",
)

critic = AssistantAgent(
    name="Critic",
    system_message="You are the critic. Your role is to review and provide constructive feedback on the article.",
    llm_config=llm_config,
)

writer = AssistantAgent(
    name="Writer",
    system_message="You are the writer. You will write the article based on the summarized news.",
    llm_config=llm_config,
)

planner = AssistantAgent(
    name="Planner",
    system_message="You are the planner. Your role is to organize the content and structure of the article.",
    llm_config=llm_config,
)

def fetch_news(api_key):
    url = f"https://newsapi.org/v2/top-headlines"
    params = {
        "apiKey": api_key,
        "country": "us",  # Example: Fetch top headlines from the US
        "pageSize": 10,    # Number of articles to retrieve
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()["articles"]
    else:
        print(f"Failed to fetch news. Status code: {response.status_code}")
        return []

# Fetch news articles
news_articles = fetch_news(news_api_key)

# Define a function to summarize news articles
def summarize_news(articles):
    summary = ""
    for idx, article in enumerate(articles, start=1):
        summary += f"**Article {idx}:** {article['title']}\n"
        summary += f"Source: {article['source']['name']}\n"
        summary += f"Description: {article['description']}\n\n"
    return summary.strip()

# Summarize fetched news articles
news_summary = summarize_news(news_articles)

# Create a GroupChat for collaboration
initial_task = f"Based on the latest news headlines, create an article summarizing the following:\n\n{news_summary}"
groupchat = GroupChat(agents=[user_proxy, critic, writer, planner], messages=[], max_round=10)
manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config)

# Start the chat to create an article
res = user_proxy.initiate_chat(
    manager, message=initial_task
)

# Print the final article generated by the writer
print(res.summary)
